
deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000450  08000450  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000450  08000450  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000450  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000458  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f7f  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000454  00000000  00000000  00020fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00021408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00021600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f48  00000000  00000000  000217b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e5e  00000000  00000000  000236f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf294  00000000  00000000  00025556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e47ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000610  00000000  00000000  000e483c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000438 	.word	0x08000438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000438 	.word	0x08000438

080001c8 <main>:
void turn_name_off();
void turn_surname_off();
void delay1();
void delay2();
int main()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	int i ;
    init_leds();
 80001ce:	f000 f821 	bl	8000214 <init_leds>
    delay1();
 80001d2:	f000 f877 	bl	80002c4 <delay1>
    for(i=0;i<4;i++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e006      	b.n	80001ea <main+0x22>
        turn_name_on();
 80001dc:	f000 f83a 	bl	8000254 <turn_name_on>
        turn_name_off();
 80001e0:	f000 f846 	bl	8000270 <turn_name_off>
    for(i=0;i<4;i++){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	ddf5      	ble.n	80001dc <main+0x14>
    }
    for(i=0;i<6;i++){
 80001f0:	2300      	movs	r3, #0
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	e006      	b.n	8000204 <main+0x3c>
        turn_surname_on();
 80001f6:	f000 f849 	bl	800028c <turn_surname_on>
        turn_surname_off();
 80001fa:	f000 f855 	bl	80002a8 <turn_surname_off>
    for(i=0;i<6;i++){
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	3301      	adds	r3, #1
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b05      	cmp	r3, #5
 8000208:	ddf5      	ble.n	80001f6 <main+0x2e>
 800020a:	2300      	movs	r3, #0
    }


}
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <init_leds>:



void init_leds(){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

    *((unsigned volatile int *)RCC_ENABLE)|=0x00000009; //A VE D
 8000218:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <init_leds+0x34>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <init_leds+0x34>)
 800021e:	f043 0309 	orr.w	r3, r3, #9
 8000222:	6013      	str	r3, [r2, #0]
    *((unsigned volatile int *)GPIODMOD_REG)|=0x05000001; // 13 ve 12 pinleri açıldı
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <init_leds+0x38>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <init_leds+0x38>)
 800022a:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]

    *((unsigned volatile int *)GPIO_OUTPIN)&=CLOSELEDS;
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <init_leds+0x3c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <init_leds+0x3c>)
 800023a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800023e:	6013      	str	r3, [r2, #0]

}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	40023830 	.word	0x40023830
 800024c:	40020c00 	.word	0x40020c00
 8000250:	40020c14 	.word	0x40020c14

08000254 <turn_name_on>:
void turn_name_on(){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0

        *((unsigned volatile int *)GPIO_OUTPIN)|=DURUNCU;
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <turn_name_on+0x18>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a03      	ldr	r2, [pc, #12]	; (800026c <turn_name_on+0x18>)
 800025e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000262:	6013      	str	r3, [r2, #0]
        delay1();
 8000264:	f000 f82e 	bl	80002c4 <delay1>

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40020c14 	.word	0x40020c14

08000270 <turn_name_off>:
void turn_name_off(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

    *((unsigned volatile int *)GPIO_OUTPIN)&=KAPATDURUNCU;
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <turn_name_off+0x18>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a03      	ldr	r2, [pc, #12]	; (8000288 <turn_name_off+0x18>)
 800027a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800027e:	6013      	str	r3, [r2, #0]
    delay2();
 8000280:	f000 f836 	bl	80002f0 <delay2>

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40020c14 	.word	0x40020c14

0800028c <turn_surname_on>:
void turn_surname_on(){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0

    *((unsigned volatile int *)GPIO_OUTPIN)|=YESIL;
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <turn_surname_on+0x18>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a03      	ldr	r2, [pc, #12]	; (80002a4 <turn_surname_on+0x18>)
 8000296:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800029a:	6013      	str	r3, [r2, #0]
        delay1();
 800029c:	f000 f812 	bl	80002c4 <delay1>

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40020c14 	.word	0x40020c14

080002a8 <turn_surname_off>:
void turn_surname_off(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0

    *((unsigned volatile int *)GPIO_OUTPIN)&=KAPATYESIL;
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <turn_surname_off+0x18>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <turn_surname_off+0x18>)
 80002b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002b6:	6013      	str	r3, [r2, #0]
    delay2();
 80002b8:	f000 f81a 	bl	80002f0 <delay2>

}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40020c14 	.word	0x40020c14

080002c4 <delay1>:
void delay1(){
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0

for(int i=0;i<36000000;i++){
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	e002      	b.n	80002d6 <delay1+0x12>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <delay1+0x28>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	ddf8      	ble.n	80002d0 <delay1+0xc>

}
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	022550ff 	.word	0x022550ff

080002f0 <delay2>:
void delay2(){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
for(int i=0;i<18000000;i++){
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	e002      	b.n	8000302 <delay2+0x12>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3301      	adds	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <delay2+0x28>)
 8000306:	4293      	cmp	r3, r2
 8000308:	ddf8      	ble.n	80002fc <delay2+0xc>

}
}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	0112a87f 	.word	0x0112a87f

0800031c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000320:	e7fe      	b.n	8000320 <NMI_Handler+0x4>

08000322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000326:	e7fe      	b.n	8000326 <HardFault_Handler+0x4>

08000328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800032c:	e7fe      	b.n	800032c <MemManage_Handler+0x4>

0800032e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000332:	e7fe      	b.n	8000332 <BusFault_Handler+0x4>

08000334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000338:	e7fe      	b.n	8000338 <UsageFault_Handler+0x4>

0800033a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr

08000346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr

08000352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000362:	f000 f833 	bl	80003cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}

0800036a <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
	...

08000378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800037e:	490e      	ldr	r1, [pc, #56]	; (80003b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000394:	4c0b      	ldr	r4, [pc, #44]	; (80003c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003a2:	f7ff ffe2 	bl	800036a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a6:	f000 f823 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003aa:	f7ff ff0d 	bl	80001c8 <main>
  bx  lr    
 80003ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003bc:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c4:	20000024 	.word	0x20000024

080003c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <HAL_IncTick+0x1c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HAL_IncTick+0x20>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_IncTick+0x20>)
 80003de:	6013      	str	r3, [r2, #0]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	20000000 	.word	0x20000000
 80003ec:	20000020 	.word	0x20000020

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	; (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	; (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	; (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	; (8000434 <__libc_init_array+0x44>)
 8000404:	f000 f818 	bl	8000438 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000450 	.word	0x08000450
 800042c:	08000450 	.word	0x08000450
 8000430:	08000450 	.word	0x08000450
 8000434:	08000454 	.word	0x08000454

08000438 <_init>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

08000444 <_fini>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr
